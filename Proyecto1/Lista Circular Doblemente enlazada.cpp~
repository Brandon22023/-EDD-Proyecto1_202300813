//
// Created by Marro on 16/12/2024.
//

#include <string>
#include <ostream>

using namespace std;

// Nodo de la lista circular doblemente enlazada
class NodoTransaccion {
public:
    string idTransaccion;      // ID único de la transacción
    string idActivo;           // ID del activo rentado
    string usuario;            // Usuario que realizó la renta
    string departamento;       // Departamento del usuario
    string empresa;            // Empresa del usuario
    string fecha;              // Fecha de la transacción
    int tiempoRentar;          // Tiempo de renta (en días)

    NodoTransaccion* siguiente;
    NodoTransaccion* anterior;

    NodoTransaccion(string idTransaccion, string idActivo, string usuario,
                     string departamento, string empresa, string fecha, int tiempoRentar)
        : idTransaccion(idTransaccion), idActivo(idActivo), usuario(usuario),
          departamento(departamento), empresa(empresa), fecha(fecha), tiempoRentar(tiempoRentar) {
        siguiente = anterior = nullptr;
    }
};

// Lista Circular Doblemente Enlazada
class ListaCircularDoble {
private:
    NodoTransaccion* cabeza;

public:
    ListaCircularDoble() {
        cabeza = nullptr;
    }

    // Método para agregar una nueva transacción
    void agregarTransaccion(string idTransaccion, string idActivo, string usuario,
                             string departamento, string empresa, string fecha, int tiempoRentar) {
        NodoTransaccion* nuevo = new NodoTransaccion(idTransaccion, idActivo, usuario,
                                                     departamento, empresa, fecha, tiempoRentar);
        if (cabeza == nullptr) {
            // Si la lista está vacía, el primer nodo es el mismo en cabeza y cola
            cabeza = nuevo;
            cabeza->siguiente = cabeza;
            cabeza->anterior = cabeza;
        } else {
            // Insertar el nodo al final de la lista
            NodoTransaccion* ultimo = cabeza->anterior;
            ultimo->siguiente = nuevo;
            nuevo->anterior = ultimo;
            nuevo->siguiente = cabeza;
            cabeza->anterior = nuevo;
        }
    }

    // Mostrar las transacciones
    void mostrarTransacciones() {
        if (cabeza == nullptr) {
            cout << "No hay transacciones." << endl;
            return;
        }

        NodoTransaccion* actual = cabeza;
        do {
            cout << "ID Transacción: " << actual->idTransaccion << endl;
            cout << "ID Activo: " << actual->idActivo << endl;
            cout << "Usuario: " << actual->usuario << endl;
            cout << "Departamento: " << actual->departamento << endl;
            cout << "Empresa: " << actual->empresa << endl;
            cout << "Fecha: " << actual->fecha << endl;
            cout << "Tiempo de Renta (días): " << actual->tiempoRentar << endl;
            cout << "--------------------------" << endl;
            actual = actual->siguiente;
        } while (actual != cabeza);
    }

    // Método para eliminar una transacción por su ID
    void eliminarTransaccion(string idTransaccion) {
        if (cabeza == nullptr) {
            cout << "No hay transacciones para eliminar." << endl;
            return;
        }

        NodoTransaccion* actual = cabeza;
        do {
            if (actual->idTransaccion == idTransaccion) {
                if (actual == cabeza && actual->siguiente == cabeza) {
                    // Si es el único nodo en la lista
                    delete actual;
                    cabeza = nullptr;
                    return;
                }

                actual->anterior->siguiente = actual->siguiente;
                actual->siguiente->anterior = actual->anterior;

                // Sí estamos eliminando el primer nodo (cabeza)
                if (actual == cabeza) {
                    cabeza = actual->siguiente;
                }

                delete actual;
                cout << "Transacción " << idTransaccion << " eliminada." << endl;
                return;
            }
            actual = actual->siguiente;
        } while (actual != cabeza);

        cout << "Transacción no encontrada." << endl;
    }
};


